generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "Brand_name_key")
  createdAt DateTime  @default(now())
  updatedAt DateTime
  product   product[]
}

model category {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "Category_name_key")
  createdAt DateTime  @default(now())
  updatedAt DateTime
  product   product[]
}

model emailverification {
  id         Int       @id @default(autoincrement())
  userId     Int
  email      String
  code       String
  expiresAt  DateTime
  verified   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  verifiedAt DateTime?
  user       user      @relation(fields: [userId], references: [id], map: "EmailVerification_userId_fkey")

  @@index([code, expiresAt], map: "EmailVerification_code_expiresAt_idx")
  @@index([userId], map: "EmailVerification_userId_fkey")
}

model passwordreset {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], map: "PasswordReset_userId_fkey")

  @@index([code, expiresAt], map: "PasswordReset_code_expiresAt_idx")
  @@index([userId], map: "PasswordReset_userId_fkey")
}

model product {
  id              Int               @id @default(autoincrement())
  name            String
  price           Float
  stock           Int               @default(0)
  imageUrl        String?
  brandId         Int?
  categoryId      Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  brand           brand?            @relation(fields: [brandId], references: [id], map: "Product_brandId_fkey")
  category        category?         @relation(fields: [categoryId], references: [id], map: "Product_categoryId_fkey")
  transactionitem transactionitem[]

  @@index([brandId], map: "Product_brandId_fkey")
  @@index([categoryId], map: "Product_categoryId_fkey")
  @@index([name], map: "Product_name_idx")
}

model registrationpin {
  id          Int       @id @default(autoincrement())
  code        String    @unique(map: "RegistrationPin_code_key")
  expiresAt   DateTime
  used        Boolean   @default(false)
  createdById Int
  createdAt   DateTime  @default(now())
  usedAt      DateTime?
  revokedById Int?
  revokedAt   DateTime?
  user        user      @relation(fields: [createdById], references: [id], map: "RegistrationPin_createdById_fkey")

  @@index([createdById], map: "RegistrationPin_createdById_fkey")
}

model transaction {
  id              Int                @id @default(autoincrement())
  cashierId       Int
  total           Float
  status          transaction_status @default(DRAFT)
  createdAt       DateTime           @default(now())
  user            user               @relation(fields: [cashierId], references: [id], map: "Transaction_cashierId_fkey")
  transactionitem transactionitem[]

  @@index([cashierId], map: "Transaction_cashierId_idx")
  @@index([createdAt], map: "Transaction_createdAt_idx")
}

model transactionitem {
  id            Int         @id @default(autoincrement())
  transactionId Int
  productId     Int
  quantity      Int
  price         Float
  subtotal      Float
  product       product     @relation(fields: [productId], references: [id], map: "TransactionItem_productId_fkey")
  transaction   transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, map: "TransactionItem_transactionId_fkey")

  @@index([productId], map: "TransactionItem_productId_fkey")
  @@index([transactionId], map: "TransactionItem_transactionId_idx")
}

model user {
  id                Int                 @id @default(autoincrement())
  userName          String              @unique(map: "User_userName_key")
  email             String              @unique(map: "User_email_key")
  password          String?
  isVerified        Boolean             @default(false)
  role              user_role           @default(CASHIER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  emailverification emailverification[]
  passwordreset     passwordreset[]
  registrationpin   registrationpin[]
  transaction       transaction[]
}

enum transaction_status {
  DRAFT
  LOCKED
}

enum user_role {
  ADMIN
  CASHIER
}
