generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum role {
  Cashier
  Admin
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String?  @unique
  password String?
  role     role    @default(Cashier)

  isVerified      Boolean   @default(false)
  emailVerifiedAt DateTime?

  registrationPins   RegistrationPin[]
  emailVerifications EmailVerification[]
  passwordResets     PasswordReset[]
  transactions       Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model RegistrationPin {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)

  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int

  createdAt DateTime  @default(now())
  usedAt    DateTime?

  revokedById Int? 
  revokedAt   DateTime?
}

model EmailVerification {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  email      String
  code       String
  expiresAt  DateTime
  verified   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  verifiedAt DateTime?

  @@index([code, expiresAt])
}

model PasswordReset {
  id        Int       @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id])

  @@index([code, expiresAt])
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id        Int       @id @default(autoincrement())
  name      String
  price     Float
  stock     Int       @default(0)
  imageUrl  String?

  brandId   Int?
  brand     Brand?    @relation(fields: [brandId], references: [id])

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])

  transactionItems TransactionItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name])
}

model Transaction {
  id        Int               @id @default(autoincrement())
  cashierId Int
  total     Float
  createdAt DateTime          @default(now())

  cashier   User              @relation(fields: [cashierId], references: [id])
  items     TransactionItem[] 

  @@index([cashierId])
}

model TransactionItem {
  id            Int         @id @default(autoincrement())
  transactionId Int
  productId     Int
  quantity      Int
  price         Float
  subtotal      Float

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id])
}
